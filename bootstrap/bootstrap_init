#!/bin/sh
#define logging output
LOGFILE=/boot_log
touch $LOGFILE

#default values so the system should boot without
#anything set via the cmdline
SSH=false
QUIET=false
ROOT="LABEL=root"
SCNDCMDL="quiet ro root=LABEL=root panic=1"
FILESYSTEM="ext4"
STOP=false
SCNDKERNEL="default"
SCNDINITRD="default"

#load functions
. /scripts/functions
. /bootstrap/bootstrap_functions

#parse cmdline
CMDLINE="$(cat /proc/cmdline)"
for x in $CMDLINE; do
  case $x in
    server=*)
      SERVER="${x/server=}"
      ;;
    ssh)
      SSH=true
      ;;
    quiet)
      QUIET=true
      ;;
    root=*)
      ROOT="${x/root=}"
      ;;
    scndcmdl=*)
      SCNDCMDL="${x/scndcmdl=}"
      ;;
    filesystem=*)
      FILESYSTEM="${x/filesystem=}"
      ;;
    stop)
      STOP=true
      ;;
    scndkernel=*)
      SCNDKERNEL="${x/scndkernel=}"
      ;;
    scndinitrd=*)
      SCNDINITRD="${x/scndinitrd=}"
      ;;
  esac
done

if [ "$SSH" = true ]; then
	start_dropbear
	if [ "$STOP" = true ]; then
		abort_boot \"stop\" set, keeping SSH running and dropping to console
	fi
	echo "Waiting for 10 seconds..."
	sleep 10
	while [[ $(netstat -t | grep -c :23) -gt 0 ]]; do
		echo "Found active SSH session, not booting for 30 seconds..."
		echo "To stop the machine from booting completely, do \"echo 1 \> /bootstrap/cancel_boot\""
		sleep 30
		if [[ $(cat /bootstrap/cancel_boot) -eq 1 ]]; then
			abort_boot boot halted by \"/bootstrap/cancel_boot\"
		fi
	done
fi

if [ "$STOP" = true ]; then
	abort_boot \"stop\" set, dropping to console
fi

if [ -z "$SERVER" ]; then
	echo No server set, trying to boot from HDD
	mkdir /mnt
	mount -t "$FILESYSTEM" "$ROOT" /mnt >> $LOGFILE 2>&1
	#copy files from overlay given by initrams, if they exist 
	if [ -f /fs_overlay.tar ]; then
	       	tar -zxvf /fs_overlay.tar -C /mnt
	fi

	#now we need to decide which kernel / initrd to use
	#if they were not set in the cmdline, we'll try whether the
	#/vmlinuz and /initrd.img symlinks exist in the mounted fs
	#if they don't, we find the newest version of both in /boot and use those
	#IMPORTANT: If the kernel is not set, we will ignore any manually set initrd as well
	if [ "$SCNDKERNEL" = default ]; then
		if [ ! -f /mnt/vmlinuz ]; then
			#symlink doesn't exist, but maybe there's something in /boot
			POSSIBLEKERNEL=$(ls /mnt/boot/vmlinuz-* -v | tail -n 1)
			if [ -z "$POSSIBLEKERNEL" ]; then
				#No kernel is set, the symlink doesn't exist and
				#we didn't find anything suitable in /boot
				abort_boot_ssh No kernel found, maybe mount failed
			fi
			#symlink wasn't set, but there is a kernel we can use in /boot
			SCNDKERNEL="${POSSIBLEKERNEL/\/mnt}"
			#if there is a kernel there, there should also be an initrd
			POSSIBLEINITRD=$(ls /mnt/boot/initrd.img-* -v | tail -n 1)
			if [ -z "$POSSIBLEINITRD" ]; then
				abort_boot_ssh kernel found in /boot, but no initrd
			fi
			SCNDINITRD="${POSSIBLEINITRD/\/mnt}"
			if [ ${SCNDINITRD/\/boot\/initrd.img-} != ${SCNDKERNEL/\/boot\/vmlinuz-} ]; then
				abort_boot_ssh kernel and initrd found in /boot, but their versions do not match: $SCNDKERNEL vs. $SCNDINITRD
			fi;
		else
			#symlink exists
			SCNDKERNEL="/vmlinuz"
			#if that symlink exists, it hopefully also does for initrd
			if [ ! -f /mnt/initrd.img ]; then
				abort_boot_ssh symlink for kernel exists, but not for initrd
			fi
			SCNDINITRD="/initrd.img"
		fi
	else
		if [ "$SCNDINITRD" = default ]; then
			abort_boot_ssh kernel was set manually, but initrd was not
		fi
	fi
	/bootstrap/kexec -l /mnt$SCNDKERNEL --initrd=/mnt$SCNDINITRD --command-line="$SCNDCMDL" >> $LOGFILE 2>&1
	umount /mnt
	/bootstrap/kexec -e >> $LOGFILE 2>&1
	abort_boot_ssh mount or kexec failed
fi

clear
echo Booting via HTTP using server "$SERVER"
wget -q -O /bootstrap/network-boot/config.sh "$SERVER"/config.sh
chmod +x /bootstrap/network-boot/config.sh
/bootstrap/network-boot/config.sh
